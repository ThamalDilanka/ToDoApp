{"version":3,"sources":["components/ToDoTask.js","components/ToDoTasks.js","components/ToDoInput.js","components/Header.js","components/PlaceHolder.js","App.js","serviceWorker.js","index.js"],"names":["ToDoTask","getStyle","props","toDoTask","completed","textDecoration","this","id","task","Fragment","className","FormControlLabel","control","Checkbox","checked","onChange","markComplete","bind","name","color","style","role","aria-label","type","disabled","onClick","updateTask","size","toDoUpdateId","onResetTask","deleteTask","Component","prototypes","toDoTasks","PropTypes","array","isRequired","ToDoTasks","pending","filter","length","map","key","ToDoInput","e","onSubmit","placeholder","value","toDoInput","Header","PlaceHolder","App","state","toDoDeleteId","showDeleteAlert","checkedTask","find","setState","confirmDelete","addToDoTask","newToDoTask","uuid","updateTaskHandler","onChangeHandler","target","onSubmitHandler","preventDefault","onResetTaskHandler","console","log","warning","showCancel","confirmBtnText","confirmBtnBsStyle","cancelBtnBsStyle","title","onConfirm","onCancel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26c0ef6c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Pencil, Trash, ArrowCounterclockwise } from 'react-bootstrap-icons';\r\nimport '../components/component.css';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nclass ToDoTask extends Component {\r\n\tgetStyle = () => {\r\n\t\tif (this.props.toDoTask.completed) {\r\n\t\t\treturn {\r\n\t\t\t\ttextDecoration: 'line-through'\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\ttextDecoration: 'none'\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { id, task } = this.props.toDoTask;\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<tr className='d-flex'>\r\n\t\t\t\t\t<td className='col-1'>\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\tchecked={this.props.toDoTask.completed}\r\n\t\t\t\t\t\t\t\t\tonChange={this.props.markComplete.bind(\r\n\t\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t\tid\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\tname='checkedB'\r\n\t\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td className='col-8' style={this.getStyle()}>\r\n\t\t\t\t\t\t{task}\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td className='col-3 text-right'>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName='btn-group btn-group-sm'\r\n\t\t\t\t\t\t\trole='group'\r\n\t\t\t\t\t\t\taria-label='Basic example'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{this.props.toDoTask.completed ? (\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\t\tclassName='btn btn-outline-info'\r\n\t\t\t\t\t\t\t\t\tdisabled\r\n\t\t\t\t\t\t\t\t\tonClick={this.props.updateTask.bind(\r\n\t\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t\tid\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Pencil size={12} />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t) : this.props.toDoUpdateId !==\r\n\t\t\t\t\t\t\t  this.props.toDoTask.id ? (\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\t\tclassName='btn btn-outline-info'\r\n\t\t\t\t\t\t\t\t\tonClick={this.props.updateTask.bind(\r\n\t\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t\tid\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Pencil size={12} />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\t\tclassName='btn btn-outline-info'\r\n\t\t\t\t\t\t\t\t\tonClick={this.props.onResetTask}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<ArrowCounterclockwise size={12} />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\tclassName='btn btn-outline-danger'\r\n\t\t\t\t\t\t\t\tonClick={this.props.deleteTask.bind(this, id)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Trash size={12} />\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// Validate props\r\nToDoTask.prototypes = {\r\n\ttoDoTasks: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ToDoTask;\r\n","import React, { Component } from 'react';\r\nimport ToDoTask from './ToDoTask';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ToDoTasks extends Component {\r\n\trender() {\r\n\t\tconst pending = [\r\n\t\t\t...this.props.toDoTasks.filter(\r\n\t\t\t\ttoDoTask => toDoTask.completed !== true\r\n\t\t\t)\r\n\t\t];\r\n\r\n\t\tconst completed = [\r\n\t\t\t...this.props.toDoTasks.filter(\r\n\t\t\t\ttoDoTask => toDoTask.completed === true\r\n\t\t\t)\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<table className='table mb-5'>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{pending.length !== 0 ? (\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclassName='alert alert-warning '\r\n\t\t\t\t\t\t\t\t\trole='alert'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tPending{' '}\r\n\t\t\t\t\t\t\t\t\t<span className='badge badge-warning'>\r\n\t\t\t\t\t\t\t\t\t\t{pending.length}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t) : null}\r\n\r\n\t\t\t\t\t{pending.map(toDoTask => (\r\n\t\t\t\t\t\t<ToDoTask\r\n\t\t\t\t\t\t\tkey={toDoTask.id}\r\n\t\t\t\t\t\t\ttoDoTask={toDoTask}\r\n\t\t\t\t\t\t\tmarkComplete={this.props.markComplete}\r\n\t\t\t\t\t\t\tdeleteTask={this.props.deleteTask}\r\n\t\t\t\t\t\t\tupdateTask={this.props.updateTask}\r\n\t\t\t\t\t\t\ttoDoUpdateId={this.props.toDoUpdateId}\r\n\t\t\t\t\t\t\tonResetTask={this.props.onResetTask}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t{completed.length !== 0 ? (\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclassName='alert alert-success '\r\n\t\t\t\t\t\t\t\t\trole='alert'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tCompleted{' '}\r\n\t\t\t\t\t\t\t\t\t<span className='badge badge-success'>\r\n\t\t\t\t\t\t\t\t\t\t{completed.length}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t) : null}\r\n\r\n\t\t\t\t\t{completed.map(toDoTask => (\r\n\t\t\t\t\t\t<ToDoTask\r\n\t\t\t\t\t\t\tkey={toDoTask.id}\r\n\t\t\t\t\t\t\ttoDoTask={toDoTask}\r\n\t\t\t\t\t\t\tmarkComplete={this.props.markComplete}\r\n\t\t\t\t\t\t\tdeleteTask={this.props.deleteTask}\r\n\t\t\t\t\t\t\tupdateTask={this.props.updateTask}\r\n\t\t\t\t\t\t\ttoDoUpdateId={this.props.toDoUpdateId}\r\n\t\t\t\t\t\t\tonResetTask={this.props.onResetTask}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// Validate props\r\nToDoTasks.prototypes = {\r\n\ttoDoTasks: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ToDoTasks;\r\n","import React, { Component } from 'react';\r\nimport { Plus, Bookmark } from 'react-bootstrap-icons';\r\n\r\nclass ToDoInput extends Component {\r\n\tonChange = e => this.props.onChange(e);\r\n\tonSubmit = e => this.props.onSubmit(e);\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.onSubmit}>\r\n\t\t\t\t<div className='input-group mb-5'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tclassName='form-control'\r\n\t\t\t\t\t\tplaceholder='Add new task here'\r\n\t\t\t\t\t\tvalue={this.props.toDoInput}\r\n\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className='input-group-append'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName='btn btn-outline-primary'\r\n\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{this.props.toDoUpdateId === -1 ? (\r\n\t\t\t\t\t\t\t\t<Plus />\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<Bookmark />\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ToDoInput;\r\n","import React, { Component } from 'react';\r\nimport '../components/component.css';\r\n\r\nclass Header extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div className='todo-header position-relative overflow-hidden  text-center bg-light'>\r\n\t\t\t\t\t<div className='col-md-5 p-lg-5 mx-auto my-5'>\r\n\t\t\t\t\t\t<h1 className='display-4 font-weight-normal'>\r\n\t\t\t\t\t\t\tTo-Do App\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t<p className='lead font-weight-normal'>\r\n\t\t\t\t\t\t\tFor every minute spent organizing, an hour is\r\n\t\t\t\t\t\t\tearned.\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>Let's create your To-Do list here!</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass PlaceHolder extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='place-holder-container'>\r\n\t\t\t\t<div className='col-md-5 p-lg-5 mx-auto my-5'>\r\n\t\t\t\t\t<p className='lead font-weight-normal text-center'>\r\n\t\t\t\t\t\tYour To-Do list currently empty!\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className='text-center'>Let's add something</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PlaceHolder;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ToDoTasks from './components/ToDoTasks';\r\nimport ToDoInput from './components/ToDoInput';\r\nimport Header from './components/Header';\r\nimport PlaceHolder from './components/PlaceHolder';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\nimport uuid from 'react-uuid';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\ttoDoTasks: [],\r\n\t\ttoDoInput: '',\r\n\t\ttoDoUpdateId: -1,\r\n\t\ttoDoDeleteId: -1,\r\n\t\tshowDeleteAlert: false\r\n\t};\r\n\r\n\t// Toggle completed and rearrange the array\r\n\tmarkComplete = id => {\r\n\t\tconst checkedTask = this.state.toDoTasks.find(\r\n\t\t\ttoDoTask => toDoTask.id === id\r\n\t\t);\r\n\r\n\t\tcheckedTask.completed = !checkedTask.completed;\r\n\r\n\t\tif (checkedTask.completed) {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttoDoTasks: [\r\n\t\t\t\t\t...this.state.toDoTasks.filter(\r\n\t\t\t\t\t\ttoDoTask => toDoTask.id !== id\r\n\t\t\t\t\t),\r\n\t\t\t\t\tcheckedTask\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttoDoTasks: [\r\n\t\t\t\t\tcheckedTask,\r\n\t\t\t\t\t...this.state.toDoTasks.filter(\r\n\t\t\t\t\t\ttoDoTask => toDoTask.id !== id\r\n\t\t\t\t\t)\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// Prompt alert to confirm deletion\r\n\tconfirmDelete = id => {\r\n\t\tthis.setState({\r\n\t\t\tshowDeleteAlert: true,\r\n\t\t\ttoDoDeleteId: id\r\n\t\t});\r\n\t};\r\n\r\n\t// Deleting a task\r\n\tdeleteTask = () => {\r\n\t\tthis.setState({\r\n\t\t\ttoDoTasks: [\r\n\t\t\t\t...this.state.toDoTasks.filter(\r\n\t\t\t\t\ttoDoTask => toDoTask.id !== this.state.toDoDeleteId\r\n\t\t\t\t)\r\n\t\t\t],\r\n\t\t\ttoDoDeleteId: -1,\r\n\t\t\tshowDeleteAlert: false\r\n\t\t});\r\n\t};\r\n\r\n\t// Add or Update a todo task\r\n\taddToDoTask = (id, task) => {\r\n\t\tif (task !== '') {\r\n\t\t\tlet newToDoTask = {};\r\n\t\t\tif (id === -1) {\r\n\t\t\t\tnewToDoTask = {\r\n\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\ttask,\r\n\t\t\t\t\tcompleted: false\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttoDoTasks: [newToDoTask, ...this.state.toDoTasks]\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tnewToDoTask = {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\ttask,\r\n\t\t\t\t\tcompleted: this.state.toDoTasks.find(\r\n\t\t\t\t\t\ttoDoTask => toDoTask.id === id\r\n\t\t\t\t\t).completed\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttoDoTasks: this.state.toDoTasks.map(task =>\r\n\t\t\t\t\t\ttask.id === id ? newToDoTask : task\r\n\t\t\t\t\t)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Call the update method\r\n\tupdateTaskHandler = id => {\r\n\t\tthis.setState({\r\n\t\t\ttoDoInput: this.state.toDoTasks.find(toDoTask => toDoTask.id === id)\r\n\t\t\t\t.task,\r\n\t\t\ttoDoUpdateId: id\r\n\t\t});\r\n\t};\r\n\r\n\t// Onchange event handler of the input field\r\n\tonChangeHandler = e => this.setState({ toDoInput: e.target.value });\r\n\r\n\t// OnSubmit event handler of input form\r\n\tonSubmitHandler = e => {\r\n\t\te.preventDefault();\r\n\t\tthis.addToDoTask(this.state.toDoUpdateId, this.state.toDoInput);\r\n\t\tthis.setState({ toDoInput: '', toDoUpdateId: -1 });\r\n\t};\r\n\r\n\t// Reset state when cancel the updating process\r\n\tonResetTaskHandler = () => {\r\n\t\tconsole.log('object');\r\n\t\tthis.setState({\r\n\t\t\ttoDoUpdateId: -1,\r\n\t\t\ttoDoInput: ''\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Header />\r\n\r\n\t\t\t\t<div className='container mt-5'>\r\n\t\t\t\t\t<ToDoInput\r\n\t\t\t\t\t\taddToDoTask={this.addToDoTask}\r\n\t\t\t\t\t\tonSubmit={this.onSubmitHandler}\r\n\t\t\t\t\t\ttoDoInput={this.state.toDoInput}\r\n\t\t\t\t\t\tonChange={this.onChangeHandler}\r\n\t\t\t\t\t\ttoDoUpdateId={this.state.toDoUpdateId}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t{this.state.toDoTasks.length === 0 ? (\r\n\t\t\t\t\t\t<PlaceHolder />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<ToDoTasks\r\n\t\t\t\t\t\t\ttoDoTasks={this.state.toDoTasks}\r\n\t\t\t\t\t\t\tmarkComplete={this.markComplete}\r\n\t\t\t\t\t\t\tdeleteTask={this.confirmDelete}\r\n\t\t\t\t\t\t\tupdateTask={this.updateTaskHandler}\r\n\t\t\t\t\t\t\ttoDoUpdateId={this.state.toDoUpdateId}\r\n\t\t\t\t\t\t\tonResetTask={this.onResetTaskHandler}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t{this.state.showDeleteAlert ? (\r\n\t\t\t\t\t\t<SweetAlert\r\n\t\t\t\t\t\t\twarning\r\n\t\t\t\t\t\t\tshowCancel\r\n\t\t\t\t\t\t\tconfirmBtnText='Yes, delete it!'\r\n\t\t\t\t\t\t\tconfirmBtnBsStyle='danger'\r\n\t\t\t\t\t\t\tcancelBtnBsStyle='default'\r\n\t\t\t\t\t\t\ttitle='Are you sure?'\r\n\t\t\t\t\t\t\tonConfirm={this.deleteTask}\r\n\t\t\t\t\t\t\tonCancel={() => {\r\n\t\t\t\t\t\t\t\tthis.setState({ showDeleteAlert: false });\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tYou will not be able to recover this action!\r\n\t\t\t\t\t\t</SweetAlert>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}